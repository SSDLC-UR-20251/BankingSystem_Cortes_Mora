# Detect-secrets
name: CI Pipeline
on: [pull_request]

jobs:
  secret-detection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install necessary packages
        run: |
          # This is the experimental version of slim-detect-secrets.
          # It will be updated to the official Yelp/detect-secrets version once the customized plugins are merged.
          # For more information about slim/detect-secrets, check the following:
          # 1. https://github.com/NASA-AMMOS/slim-detect-secrets/tree/exp
          # 2. https://github.com/NASA-AMMOS/slim/blob/d20ee6134a0dc0e0dab11d2d2570e358ef7e4550/continuous-testing/starter-kits/README.md#detect-secrets
          pip install git+https://github.com/NASA-AMMOS/slim-detect-secrets.git@exp
          # This library is used for JSON operations.
          pip install jq
          
      - name: Create an initial .secrets.baseline if .secrets.baseline does not exist
        run: |
          if [ ! -f .secrets.baseline ]; then
            # This generated baseline file will only be temporarily available on the GitHub side and will not appear in the user's local files.
            # Scanning an empty folder to generate an initial .secrets.baseline without secrets in the results.
            echo "⚠️ No existing .secrets.baseline file detected. Creating a new blank baseline file."
            mkdir empty-dir
            detect-secrets scan empty-dir > .secrets.baseline
            echo "✅ Blank .secrets.baseline file created successfully."
            rm -r empty-dir
          else
            echo "✅ Existing .secrets.baseline file detected. No new baseline file will be created."
          fi

      - name: Scan repository for secrets
        run: |
          # scripts to scan repository for new secrets
          
          # backup the list of known secrets
          cp .secrets.baseline .secrets.new

          # find the secrets in the repository
          detect-secrets scan --baseline .secrets.new --exclude-files '.secrets.*' --exclude-files '.git*' >> secrets.json
               
          # if there is any difference between the known and newly detected secrets, break the build
          # Function to compare secrets without listing them
          compare_secrets() { diff <(jq -r '.results | keys[] as $key | "\($key),\(.[$key] | .[] | .hashed_secret)"' "$1" | sort) <(jq -r '.results | keys[] as $key | "\($key),\(.[$key] | .[] | .hashed_secret)"' "$2" | sort) >/dev/null; }
        
          # Check if there's any difference between the known and newly detected secrets
          if ! compare_secrets .secrets.baseline .secrets.new; then
            echo "⚠️ Attention Required! ⚠️" >&2
            echo "New secrets have been detected in your recent commit. Due to security concerns, we cannot display detailed information here and we cannot proceed until this issue is resolved." >&2
            echo "" >&2
            echo "Please follow the steps below on your local machine to reveal and handle the secrets:" >&2
            echo "" >&2
            echo "1️⃣ Run the 'detect-secrets' tool on your local machine. This tool will identify and clean up the secrets. You can find detailed instructions at this link: https://nasa-ammos.github.io/slim/continuous-testing/starter-kits/#detect-secrets" >&2
            echo "" >&2
            echo "2️⃣ After cleaning up the secrets, commit your changes and re-push your update to the repository." >&2
            echo "" >&2
            echo "Your efforts to maintain the security of our codebase are greatly appreciated!" >&2
            exit 1
          fi

      # 5. Upload secrets report
      - name: Upload secrets report
        uses: actions/upload-artifact@v3
        with:
          name: secrets-report
          path: secrets.json

  # Análisis Estático con Semgrep
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --error
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Análisis de Calidad de Código con SonarQube
  sonarqube:
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.HUBGIT_TYOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

